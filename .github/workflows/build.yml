name: build

on:
  workflow_dispatch:
  push:

env:
  REPO: champtitles/terraform-aws-rabbitmq-lambda
  SHA: ${{ github.sha }}
  DOCKER_USERNAME: champtitles
  DOCKER_PASSWORD: ${{ secrets.DOCKER_HUB_TOKEN }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  SONAR_ORG: champ-oss
  SONAR_HOST_URL: https://sonarcloud.io

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: set-env-info
        run: echo "GIT_REPO=$(echo ${GITHUB_REPOSITORY} | sed -e 's|.*/||')" >> $GITHUB_ENV
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
      - run: make install
      - run: make lint
        if: ${{ always() }}
      - run: make check-coverage
        if: ${{ always() }}
      - name: SonarCloud Scan
        if: ${{ always() }}
        uses: sonarsource/sonarqube-scan-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.organization=${{ env.SONAR_ORG }}
            -Dsonar.projectKey=${{ env.SONAR_ORG }}_${{ env.GIT_REPO }}
            -Dsonar.scm.provider=git
            -Dsonar.language=python
            -Dsonar.python.version=3.12
            -Dsonar.sources=.
            -Dsonar.tests=.
            -Dsonar.inclusions=**/**.py
            -Dsonar.exclusions=**/test*.py
            -Dsonar.test.inclusions=**/test*.py
            -Dsonar.pullrequest.github.repository=${{ github.repository }}
            -Dsonar.pullrequest.key=${{ github.event.number }}
            -Dsonar.pullrequest.branch=${{ github.HEAD_REF }}
            -Dsonar.pullrequest.base=${{ github.BASE_REF }}
            -Dsonar.python.coverage.reportPaths=coverage.xml
      - name: Log in to Docker Hub
        uses: docker/login-action@v3.3.0
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          cache-from: type=registry,ref=${{ env.REPO }}:latest
          cache-to: type=inline
          tags: |
            ${{ env.REPO }}:${{ env.SHA }}
            ${{ env.REPO }}:latest